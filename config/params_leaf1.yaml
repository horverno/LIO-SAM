lio_sam:

  # Topics
  pointCloudTopic: "/left_os1/os1_cloud_node/points"               # Point cloud data
  imuTopic: "imu_raw"                         # IMU data
  odomTopic: "odometry/imu"                   # IMU pre-preintegration odometry, same frequency as IMU
  gpsTopic: "odometry/gps"                   # GPS odometry topic from navsat, see module_navsat.launch file

  # Frames
  lidarFrame: "base_link"
  baselinkFrame: "base_link"
  odometryFrame: "odom"
  mapFrame: "map"

  # GPS Settings
  useImuHeadingInitialization: true           # if using GPS data, set to "true"
  useGpsElevation: true                      # if GPS elevation is bad, set to "false"
  gpsCovThreshold: 0.2                        # m^2, threshold for using GPS data
  poseCovThreshold: 5.0                      # m^2, threshold for using GPS data "poseCovThreshold" can be used to adjust the frequency of adding GPS factor to the graph. For example, you will notice the trajectory is constantly corrected by GPS whey you set "poseCovThreshold" to 1.0.
  
  # Export settings
  savePCD: true                              # https://github.com/TixiaoShan/LIO-SAM/issues/3
  savePCDDirectory: "/Downloads/LOAM/"        # in your home folder, starts and ends with "/". Warning: the code deletes "LOAM" folder then recreates it. See "mapOptimization" for implementation

  # Sensor Settings
  sensor: ouster                            # lidar sensor type, either 'velodyne' or 'ouster'
  N_SCAN: 64                                  # number of lidar channel (i.e., 16, 32, 64, 128)
  Horizon_SCAN: 512                          # lidar horizontal resolution (Velodyne:1800, Ouster:512,1024,2048)
  downsampleRate: 1                           # default: 1. Downsample your data if too many points. i.e., 16 = 64 / 4, 16 = 16 / 1
  lidarMinRange: 1.0                          # default: 1.0, minimum lidar range to be used
  lidarMaxRange: 1000.0                       # default: 1000.0, maximum lidar range to be used

  # IMU Settings
  imuAccNoise: 2.5922577704238961e-02         # https://github.com/gaowenliang/imu_utils acc_n original: 3.9939570888238808e-03 m/s^2
  imuGyrNoise: 1.2535793021888873e-03         # https://github.com/gaowenliang/imu_utils gyr_n original: 1.5636343949698187e-03 rad/s
  imuAccBiasN: 2.9902223949924354e-04         # https://github.com/gaowenliang/imu_utils acc_w original: 6.4356659353532566e-05 m/s^2
  imuGyrBiasN: 1.3255870424463113e-05         # https://github.com/gaowenliang/imu_utils gyr_w original: 3.5640318696367613e-05 rad/s
  imuGravity: 10.4953683609                 # our IMU does not have the standard 9.8 m/s^2, the offset can be written here
  imuRPYWeight: 0.01

  # Extrinsics (lidar -> IMU)
  extrinsicTrans: [0.0095, 0.0, 0.0045]
  extrinsicRot: [-1, 0, 0,
                  0, 1, 0,
                  0, 0, -1] 
                                #[ 0, 3.1415927, 0 ]
                  #extrinsicRPY: [0.852936, 0.521707, -0.0179437,
                  #               -0.520386, 0.847056, -0.108142,
                  #               -0.0412192, 0.101576, 0.993973]

  extrinsicRPY: [0,  1, 0,
                 -1, 0, 0,
                  0, 0, 1] 
                  #[ 0, 0, -1.5707963 ]
                #result euler angle(RPY) : -0.0510223 0.176352 -0.631521
                #result extrinsic rotation matrix : 
                #  0.794612   0.582383   0.171527
                # -0.581216   0.811363 -0.0622761
                # -0.175439 -0.0502091   0.983209
                ## http://www.andre-gaschler.com/rotationconverter/

                #result euler angle(RPY) : 0.101838 0.0412309 -0.547821
                #result extrinsic rotation matrix : 
                #  0.852936   0.521707 -0.0179437
                # -0.520386   0.847056  -0.108142
                #-0.0412192   0.101576   0.993973
                ##
                #  extrinsicRot: [0.794612,   0.582383,   0.171527,
                #                -0.581216,   0.811363, -0.0622761,
                #                -0.175439, -0.0502091,   0.983209]
                #  extrinsicRPY: [0.7946121,  0.5812165,  0.1754393
                #                -0.5968266,  0.8007978,  0.0502092,
                #                -0.1113090, -0.1446037,  0.9832091]


                #extrinsicRot: [1, 0, 0,
                #                0, 1, 0,
                #                0, 0, 1]
                #extrinsicRPY: [1, 0, 0,
                #                0, 1, 0,
                #                0, 0, 1]

  # LOAM feature threshold
  edgeThreshold: 1.0
  surfThreshold: 0.1
  edgeFeatureMinValidNum: 10
  surfFeatureMinValidNum: 100

  # voxel filter paprams
  odometrySurfLeafSize: 0.4                     # default: 0.4 - outdoor, 0.2 - indoor
  mappingCornerLeafSize: 0.2                    # default: 0.2 - outdoor, 0.1 - indoor
  mappingSurfLeafSize: 0.4                      # default: 0.4 - outdoor, 0.2 - indoor

  # robot motion constraint (in case you are using a 2D robot)
  z_tollerance: 20                            # meters
  rotation_tollerance: 1                     # radians

  # CPU Params
  numberOfCores: 4                              # number of cores for mapping optimization
  mappingProcessInterval: 0.15                  # seconds, regulate mapping frequency

  # Surrounding map
  surroundingkeyframeAddingDistThreshold: 1.0   # meters, regulate keyframe adding threshold
  surroundingkeyframeAddingAngleThreshold: 0.2  # radians, regulate keyframe adding threshold
  surroundingKeyframeDensity: 2.0               # meters, downsample surrounding keyframe poses   
  surroundingKeyframeSearchRadius: 50.0         # meters, within n meters scan-to-map optimization (when loop closure disabled)

  # Loop closure
  loopClosureEnableFlag: true
  loopClosureFrequency: 2.0                     # Hz, regulate loop closure constraint add frequency
  surroundingKeyframeSize: 1050                   # submap size (when loop closure enabled)
  historyKeyframeSearchRadius: 15.0             # meters, key frame that is within n meters from current pose will be considerd for loop closure
  historyKeyframeSearchTimeDiff: 90.0           # seconds, key frame that is n seconds older will be considered for loop closure
  historyKeyframeSearchNum: 50                  # number of hostory key frames will be fused into a submap for loop closure
  historyKeyframeFitnessScore: 0.3              # icp threshold, the smaller the better alignment

  # Visualization
  globalMapVisualizationSearchRadius: 1000.0    # meters, global map visualization radius
  globalMapVisualizationPoseDensity: 10.0       # meters, global map visualization keyframe density
  globalMapVisualizationLeafSize: 1.0           # meters, global map visualization cloud density




# Navsat (convert GPS coordinates to Cartesian)
navsat:
  frequency: 50
  wait_for_datum: false
  delay: 0.0
  magnetic_declination_radians: 0
  yaw_offset: 0
  zero_altitude: true
  broadcast_utm_transform: true
  broadcast_utm_transform_as_parent_frame: true
  publish_filtered_gps: true

# EKF for Navsat
ekf_gps:
  publish_tf: true
  map_frame: map
  odom_frame: odom
  base_link_frame: base_link
  world_frame: odom

  frequency: 50
  two_d_mode: false
  sensor_timeout: 0.01
  # -------------------------------------
  # External IMU:
  # -------------------------------------
  imu0: imu_correct
  # make sure the input is aligned with ROS REP105. "imu_correct" is manually transformed by myself. EKF can also transform the data using tf between your imu and base_link
  imu0_config: [false, false, false,
                true,  true,  true,
                false, false, false,
                false, false, true,
                true,  true,  true]
  imu0_differential: false
  imu0_queue_size: 50 
  imu0_remove_gravitational_acceleration: true
  # -------------------------------------
  # Odometry (From Navsat):
  # -------------------------------------
  odom0: odometry/gps
  odom0_config: [true,  true,  true,
                 false, false, false,
                 false, false, false,
                 false, false, false,
                 false, false, false]
  odom0_differential: false
  odom0_queue_size: 10

  #                            x     y     z     r     p     y   x_dot  y_dot  z_dot  r_dot p_dot y_dot x_ddot y_ddot z_ddot
  process_noise_covariance: [  1.0,  0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    1.0,  0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    10.0, 0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0.03, 0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0.03, 0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0.1,  0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0.25,  0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0.25,  0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0.04,  0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0.01, 0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0.01, 0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0.5,  0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0.01, 0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0.01,   0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0.015]
